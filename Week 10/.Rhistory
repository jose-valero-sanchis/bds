rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
BackTrackingLocal <- function(trellisBT, decisionf=max)
{
trellis <- trellisBT$trellis
backi <- trellisBT$backi
backj <- trellisBT$backj
#busqueda de la posicion con el valor mayor o menor
pos <- which(trellis==decisionf(trellis), arr.ind=TRUE)[1,]
#print(pos)
while (pos[1]!=1 & pos[2]!=1)
{
i <- pos[1]
j <- pos[2]
inew <- backi[i,j]
jnew <- backj[i,j]
cat(i-1,",",j-1," <- \t", inew-1,",",jnew-1,":\t",sep="")
if(inew==i-1 & jnew==j-1)
{
cat(trellis[i,j],"MoS\t", rownames(trellis)[i],colnames(trellis)[j],"\n")
}
else if(inew==i & jnew==j-1) #insercion de v[j]
{
cat(trellis[i,j],"I\t", "-",colnames(trellis)[j],"\n")
}
else if(inew==i-1 & jnew==j) #borrado de u[i]
{
cat(trellis[i,j],"B\t", rownames(trellis)[i],"-","\n")
}
else if(inew==1 & jnew==1)
{
cat(trellis[i,j],"Ini\t","\n")
}
posNew <- c(inew,jnew)
pos <- posNew
}
}
#S: Sequence 1
#R: Sequence 2
#delta: scoring matrix or function
#decisionf={max,min, ...}, if delta is a distance matrix, then min; else max
#Peor: the worst value for scoring
SmithWaterman <- function(S,R,delta, decisionf=max,Peor=-Inf)
{
u <- strsplit(S," ")[[1]]
m <- length(u)
v <- strsplit(R," ")[[1]]
n <- length(v)
trellis <- matrix(rep(0,m*n),nrow=m,ncol=n,
dimnames=list(u,v))
backi <- matrix(rep(0,m*n),nrow=m,ncol=n,
dimnames=list(u,v))
backj <- matrix(rep(0,m*n),nrow=m,ncol=n,
dimnames=list(u,v))
costes <- c(Peor,Peor,Peor,0)
names(costes) <- c("MoS", "I", "B","Ini")
#borrado de u[i]
for (i in 2:m)
{
costes["B"] <- trellis[i-1,1]+delta(u[i],"-")
trellis[i,1] <- decisionf(costes)
operacion <- names(which(costes==trellis[i,1])[1])
if (operacion=="B")
{backi[i,1] <- i-1; backj[i,1] <- 1;}
else if (operacion=="Ini")
{backi[i,1] <- 1; backj[i,1] <- 1;}
else warning("Not recognized operation in Trellis")
}
costes <- c(Peor,Peor,Peor,0)
names(costes) <- c("MoS", "I", "B","Ini")
for (j in 2:n)
{
costes["I"] <- trellis[1,j-1]+delta("-",v[j])
trellis[1,j] <- decisionf(costes)
operacion <- names(which(costes==trellis[1,j])[1])
if (operacion=="B")
{backi[1,j] <- 1; backj[1,j] <- j-1;}
else if (operacion=="Ini")
{backi[1,j] <- 1; backj[1,j] <- 1;}
else warning("Not recognized operation in Trellis")
}
costes <- c(Peor,Peor,Peor,0)
names(costes) <- c("MoS", "I", "B","Ini")
#General loop
for (i in 2:m)
{
for (j in 2:n)
{
#deletion of u[i]
costes["B"] <- trellis[i-1, j] + delta(u[i], "-")
#insertion of v[j]
costes["I"] <- trellis[i, j-1] + delta("-", v[j])
#sustitution or match u[i]==v[j]
costes["MoS"] <- trellis[i-1, j-1] + delta(u[i], v[j])
#cost of the operation
trellis[i,j] <- decisionf(costes)
#preparing the backtracking
operacion <- names(which(costes==trellis[i,j])[1])
if (operacion=="B")
{backi[i,j] <- i-1; backj[i,j] <- j;}
else if (operacion=="I")
{backi[i,j] <- i; backj[i,j] <- j-1;}
else if (operacion=="MoS")
{backi[i,j] <- i-1; backj[i,j] <- j-1;}
else if (operacion=="Ini")
{backi[i,j] <- 1; backj[i,j] <- 1;}
else warning("Not recognized operation in Trellis")
} #for j
} #for i
result <- list()
result$trellis <- trellis
result$backi <- backi
result$backj <- backj
print(result$trellis)
BackTrackingLocal(result)
return(result)
}
cholesterol_level <- function(CHO_TOTAL)
{
CHO_TOTAL_normal <- (CHO_TOTAL < 200.0)
CHO_TOTAL_borderline <- (CHO_TOTAL >= 200.0) & (CHO_TOTAL < 240.0)
CHO_TOTAL_high <- (CHO_TOTAL >= 240.0)
if (CHO_TOTAL_high) return("high")
if (CHO_TOTAL_borderline) return("borderline")
if (CHO_TOTAL_normal) return("normal")
}
blood_preasure_level <- function(BP_systolic, BP_diastolic)
{
BP_high <- (BP_systolic >= 140.0) | (BP_diastolic >= 90.0)
BP_prehypertension <- ((BP_systolic >= 120.0 & BP_systolic < 140.0) |
(BP_diastolic >= 80.0 & BP_diastolic < 90.0))
BP_normal <- (BP_systolic < 120.0) & (BP_diastolic < 80.0)
if (BP_high) return("high")
if (BP_prehypertension) return("prehypertension")
if (BP_normal) return("normal")
}
#delta matrix for cholecterol levels
match <- 1
jump1 <- -1
jump2 <- -2
gap <- -1 #insert/delete
delta_CHO_TOTAL <- matrix(c(match,jump1,jump2,gap,
jump1,match,jump1,gap,
jump2,jump1,match,gap,
gap,gap,gap,Inf),
dimnames=list(c("normal","borderline","high","-"),
c("normal","borderline","high","-")),
nrow=4,ncol=4,byrow=TRUE)
#delta matrix for blood preasure levels
match <- 1
jump1 <- -1
jump2 <- -2
gap <- -1 #insert/delete
delta_BLOOD_PREASURE <- matrix(c(match,jump1,jump2,gap,
jump1,match,jump1,gap,
jump2,jump1,match,gap,
gap,gap,gap,Inf),
dimnames=list(c("normal","prehypertension","high","-"),
c("normal","prehypertension","high","-")),
nrow=4,ncol=4,byrow=TRUE)
delta <- function(ui,vj)
{
ui_elements <- strsplit(ui,"\\+")[[1]]
eli <- ui_elements[1]
if (eli != "-"){
ui_CHO_TOTAL <- as.numeric(eli)
ui_BP_systolic <- as.numeric(ui_elements[2])
ui_BP_diastolic <- as.numeric(ui_elements[3])
ui_cholesterol_level <- cholesterol_level(ui_CHO_TOTAL)
ui_blood_preasure_level <- blood_preasure_level(ui_BP_systolic,ui_BP_diastolic)
}
else{
ui_cholesterol_level <- "-"
ui_blood_preasure_level <- "-"
}
vj_elements <- strsplit(vj,"\\+")[[1]]
elj <- vj_elements[1]
if (elj != "-"){
vj_CHO_TOTAL <- as.numeric(elj)
vj_BP_systolic <- as.numeric(vj_elements[2])
vj_BP_diastolic <- as.numeric(vj_elements[3])
vj_cholesterol_level <- cholesterol_level(vj_CHO_TOTAL)
vj_blood_preasure_level <- blood_preasure_level(vj_BP_systolic,vj_BP_diastolic)
}
else{
vj_cholesterol_level <- "-"
vj_blood_preasure_level <- "-"
}
# return the score of the delta function by adding the delta functions for cholesterol and blood preasure levels
return(delta_CHO_TOTAL[ui_cholesterol_level, vj_cholesterol_level] + delta_BLOOD_PREASURE[ui_blood_preasure_level, vj_blood_preasure_level])
}
seq1 <- "80.0+110.0+70.0 80.0+110.0+75.0 80.0+110.0+70.0 80.0+110.0+70.0 80.0+110.0+70.0 80.0+110.0+70.0" #sin problemas de cardiopatia
seq2 <- "80.0+110.0+70.0 80.0+110.0+75.0 90.0+150.0+95.0 90.0+145.0+95.0 90.0+145.0+95.0 90.0+145.0+95.0" #con problemas sistole-diastole a partir de 4a visita
seq3 <- "80.0+110.0+70.0 80.0+110.0+75.0 80.0+110.0+75.0 90.0+150.0+95.0 90.0+145.0+95.0 90.0+145.0+95.0" #con problemas de sistole-diastole a partir de 5a visita
print(seq1)
print(seq1)
t11sw <- SmithWaterman(seq1,seq1,delta)
print(seq1)
print(seq2)
t12sw <- SmithWaterman(seq1,seq2,delta)
print(seq1)
print(seq3)
t13sw <- SmithWaterman(seq1,seq3,delta)
print(seq2)
print(seq3)
t23sw <- SmithWaterman(seq2,seq3,delta)
seq4 <- "200.0+130.0+85.0 205.0+135.0+88.0 210.0+140.0+90.0 215.0+145.0+92.0 220.0+150.0+95.0 225.0+155.0+98.0"
seq5 <- "180.0+120.0+80.0 190.0+125.0+85.0 200.0+130.0+90.0 210.0+135.0+95.0 220.0+140.0+100.0 230.0+145.0+105.0"
seq6 <- "150.0+100.0+70.0 160.0+105.0+75.0 170.0+110.0+80.0 180.0+115.0+85.0 190.0+120.0+90.0 200.0+125.0+95.0 210.0+130.0+100.0"
print(seq4) #TODO EXERCICE 5
print(seq5) #TODO EXERCICE 5
t45sw <- SmithWaterman(seq4,seq5,delta) #TODO EXERCICE 5
